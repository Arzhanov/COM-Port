<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\example.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\example.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Jan 13 16:15:51 2021
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ADC_ini &rArr; PORT_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[68]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryMngFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryMngFault_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">FT_IF0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">FT_IF0_Handler</a><BR>
 <LI><a href="#[d]">FT_IF1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FT_IF1_Handler</a><BR>
 <LI><a href="#[e]">FT_IF2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FT_IF2_Handler</a><BR>
 <LI><a href="#[f]">FT_IF3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">FT_IF3_Handler</a><BR>
 <LI><a href="#[10]">CLK_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">CLK_IF_Handler</a><BR>
 <LI><a href="#[11]">PVD_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PVD_IF_Handler</a><BR>
 <LI><a href="#[12]">RTC_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">RTC_IF_Handler</a><BR>
 <LI><a href="#[13]">BKP_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BKP_IF_Handler</a><BR>
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">EXT_INTERROR0_Handler</a><BR>
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">EXT_INTERROR1_Handler</a><BR>
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">EXT_INTERROR2_Handler</a><BR>
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">EXT_INTERROR3_Handler</a><BR>
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EXT_INTERROR4_Handler</a><BR>
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EXT_INTERROR5_Handler</a><BR>
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EXT_INTERROR6_Handler</a><BR>
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">EXT_INTERROR7_Handler</a><BR>
 <LI><a href="#[1c]">DMA_ERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DMA_ERR_Handler</a><BR>
 <LI><a href="#[1d]">DMA_DONE0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DMA_DONE0_Handler</a><BR>
 <LI><a href="#[1e]">DMA_DONE1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DMA_DONE1_Handler</a><BR>
 <LI><a href="#[1f]">DMA_DONE2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMA_DONE2_Handler</a><BR>
 <LI><a href="#[20]">DMA_DONE3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMA_DONE3_Handler</a><BR>
 <LI><a href="#[21]">DMA_DONE4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DMA_DONE4_Handler</a><BR>
 <LI><a href="#[22]">DMA_DONE5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">DMA_DONE5_Handler</a><BR>
 <LI><a href="#[23]">DMA_DONE6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DMA_DONE6_Handler</a><BR>
 <LI><a href="#[24]">DMA_DONE7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DMA_DONE7_Handler</a><BR>
 <LI><a href="#[25]">DMA_DONE8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DMA_DONE8_Handler</a><BR>
 <LI><a href="#[26]">DMA_DONE9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">DMA_DONE9_Handler</a><BR>
 <LI><a href="#[27]">DMA_DONE10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DMA_DONE10_Handler</a><BR>
 <LI><a href="#[28]">DMA_DONE11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DMA_DONE11_Handler</a><BR>
 <LI><a href="#[29]">DMA_DONE12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">DMA_DONE12_Handler</a><BR>
 <LI><a href="#[2a]">DMA_DONE13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">DMA_DONE13_Handler</a><BR>
 <LI><a href="#[2b]">DMA_DONE14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">DMA_DONE14_Handler</a><BR>
 <LI><a href="#[2c]">DMA_DONE15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DMA_DONE15_Handler</a><BR>
 <LI><a href="#[2d]">DMA_DONE16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">DMA_DONE16_Handler</a><BR>
 <LI><a href="#[2e]">DMA_DONE17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">DMA_DONE17_Handler</a><BR>
 <LI><a href="#[2f]">DMA_DONE18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">DMA_DONE18_Handler</a><BR>
 <LI><a href="#[30]">DMA_DONE19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">DMA_DONE19_Handler</a><BR>
 <LI><a href="#[31]">DMA_DONE20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">DMA_DONE20_Handler</a><BR>
 <LI><a href="#[32]">DMA_DONE21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">DMA_DONE21_Handler</a><BR>
 <LI><a href="#[33]">DMA_DONE22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">DMA_DONE22_Handler</a><BR>
 <LI><a href="#[34]">DMA_DONE23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">DMA_DONE23_Handler</a><BR>
 <LI><a href="#[35]">DMA_DONE24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">DMA_DONE24_Handler</a><BR>
 <LI><a href="#[36]">DMA_DONE25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">DMA_DONE25_Handler</a><BR>
 <LI><a href="#[37]">DMA_DONE26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">DMA_DONE26_Handler</a><BR>
 <LI><a href="#[38]">DMA_DONE27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">DMA_DONE27_Handler</a><BR>
 <LI><a href="#[39]">DMA_DONE28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">DMA_DONE28_Handler</a><BR>
 <LI><a href="#[3a]">DMA_DONE29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">DMA_DONE29_Handler</a><BR>
 <LI><a href="#[3b]">DMA_DONE30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">DMA_DONE30_Handler</a><BR>
 <LI><a href="#[3c]">DMA_DONE31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">DMA_DONE31_Handler</a><BR>
 <LI><a href="#[3d]">IRQ_PORTA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">IRQ_PORTA_Handler</a><BR>
 <LI><a href="#[3e]">IRQ_PORTB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">IRQ_PORTB_Handler</a><BR>
 <LI><a href="#[3f]">IRQ_PORTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">IRQ_PORTC_Handler</a><BR>
 <LI><a href="#[40]">IRQ_PORTD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">IRQ_PORTD_Handler</a><BR>
 <LI><a href="#[41]">IRQ_PORTE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">IRQ_PORTE_Handler</a><BR>
 <LI><a href="#[42]">INT_ETH0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">INT_ETH0_Handler</a><BR>
 <LI><a href="#[43]">INT_SPW0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">INT_SPW0_Handler</a><BR>
 <LI><a href="#[46]">INT_TMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">INT_TMR2_Handler</a><BR>
 <LI><a href="#[47]">INT_TMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">INT_TMR3_Handler</a><BR>
 <LI><a href="#[48]">INT_CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">INT_CAN0_Handler</a><BR>
 <LI><a href="#[49]">INT_SSP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">INT_SSP0_Handler</a><BR>
 <LI><a href="#[4b]">INT_UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">INT_UART1_Handler</a><BR>
 <LI><a href="#[4c]">INT_RX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">INT_RX_ARC0_Handler</a><BR>
 <LI><a href="#[4d]">INT_TX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">INT_TX_ARC0_Handler</a><BR>
 <LI><a href="#[4e]">INT_MIL0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">INT_MIL0_Handler</a><BR>
 <LI><a href="#[4f]">INT_MIL1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">INT_MIL1_Handler</a><BR>
 <LI><a href="#[50]">INT_ADC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">INT_ADC0_Handler</a><BR>
 <LI><a href="#[52]">INT_DAC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">INT_DAC0_Handler</a><BR>
 <LI><a href="#[53]">INT_DAC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">INT_DAC1_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">BKP_IF_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[10]">CLK_IF_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1d]">DMA_DONE0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[27]">DMA_DONE10_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[28]">DMA_DONE11_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[29]">DMA_DONE12_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2a]">DMA_DONE13_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2b]">DMA_DONE14_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2c]">DMA_DONE15_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2d]">DMA_DONE16_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2e]">DMA_DONE17_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[2f]">DMA_DONE18_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[30]">DMA_DONE19_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1e]">DMA_DONE1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[31]">DMA_DONE20_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[32]">DMA_DONE21_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[33]">DMA_DONE22_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[34]">DMA_DONE23_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[35]">DMA_DONE24_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[36]">DMA_DONE25_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[37]">DMA_DONE26_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[38]">DMA_DONE27_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[39]">DMA_DONE28_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3a]">DMA_DONE29_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1f]">DMA_DONE2_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3b]">DMA_DONE30_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3c]">DMA_DONE31_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[20]">DMA_DONE3_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[21]">DMA_DONE4_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[22]">DMA_DONE5_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[23]">DMA_DONE6_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[24]">DMA_DONE7_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[25]">DMA_DONE8_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[26]">DMA_DONE9_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1c]">DMA_ERR_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[14]">EXT_INTERROR0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[15]">EXT_INTERROR1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[16]">EXT_INTERROR2_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[17]">EXT_INTERROR3_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[18]">EXT_INTERROR4_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[19]">EXT_INTERROR5_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1a]">EXT_INTERROR6_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[1b]">EXT_INTERROR7_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[c]">FT_IF0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[d]">FT_IF1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[e]">FT_IF2_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[f]">FT_IF3_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[50]">INT_ADC0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[51]">INT_ADC1_Handler</a> from senddata.o(i.INT_ADC1_Handler) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[48]">INT_CAN0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[52]">INT_DAC0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[53]">INT_DAC1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[42]">INT_ETH0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4e]">INT_MIL0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4f]">INT_MIL1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4c]">INT_RX_ARC0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[43]">INT_SPW0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[49]">INT_SSP0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[44]">INT_TMR0_Handler</a> from senddata.o(i.INT_TMR0_Handler) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[45]">INT_TMR1_Handler</a> from senddata.o(i.INT_TMR1_Handler) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[46]">INT_TMR2_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[47]">INT_TMR3_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4d]">INT_TX_ARC0_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4a]">INT_UART0_Handler</a> from receivedata.o(i.INT_UART0_Handler) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4b]">INT_UART1_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3d]">IRQ_PORTA_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3e]">IRQ_PORTB_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3f]">IRQ_PORTC_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[40]">IRQ_PORTD_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[41]">IRQ_PORTE_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[6]">MemoryMngFault_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[11]">PVD_IF_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[12]">RTC_IF_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_1986ve8t.o(.text) referenced from startup_1986ve8t.o(RESET)
 <LI><a href="#[55]">__main</a> from __main.o(!!!main) referenced from startup_1986ve8t.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[58]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[59]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[5d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[99]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[57]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ADC_ini &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[61]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[63]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryMngFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FT_IF0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FT_IF1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FT_IF2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FT_IF3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CLK_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BKP_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXT_INTERROR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXT_INTERROR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXT_INTERROR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXT_INTERROR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXT_INTERROR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXT_INTERROR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXT_INTERROR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INTERROR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IF_ERR_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>

<P><STRONG><a name="[66]"></a>IF_FIN_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>

<P><STRONG><a name="[1c]"></a>DMA_ERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_DONE0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_DONE1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_DONE2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_DONE3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_DONE4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_DONE5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_DONE6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_DONE7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_DONE8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_DONE9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_DONE10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_DONE11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_DONE12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_DONE13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_DONE14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_DONE15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_DONE16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_DONE17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_DONE18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_DONE19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_DONE20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_DONE21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA_DONE22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA_DONE23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_DONE24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_DONE25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_DONE26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA_DONE27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA_DONE28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA_DONE29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_DONE30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_DONE31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ_PORTA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ_PORTB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ_PORTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ_PORTD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ_PORTE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>INT_ETH0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>INT_SPW0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>INT_TMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>INT_TMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>INT_CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>INT_SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>INT_UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>INT_RX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>INT_TX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>INT_MIL0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>INT_MIL1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>INT_ADC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>INT_DAC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>INT_DAC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_1986ve8t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[60]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>ADC_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mdr32f8_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>

<P><STRONG><a name="[6a]"></a>ADC_Temperature_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, senddata.o(i.ADC_Temperature_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Temperature_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR1_Handler
</UL>

<P><STRONG><a name="[6d]"></a>ADC_Voltage_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, senddata.o(i.ADC_Voltage_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Voltage_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR0_Handler
</UL>

<P><STRONG><a name="[6e]"></a>ADC_ini</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, adc_test.o(i.ADC_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ADC_ini &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_PER1_CLKcmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>ADCx_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f8_adc.o(i.ADCx_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>

<P><STRONG><a name="[6b]"></a>ADCx_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f8_adc.o(i.ADCx_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_Start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Start
</UL>

<P><STRONG><a name="[6c]"></a>ADCx_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f8_adc.o(i.ADCx_Start))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_Start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Start
</UL>

<P><STRONG><a name="[71]"></a>ADCx_StructInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f8_adc.o(i.ADCx_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>

<P><STRONG><a name="[74]"></a>ApplyReferenceVoltageAGCorFGC</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, receivedata.o(i.ApplyReferenceVoltageAGCorFGC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ApplyReferenceVoltageAGCorFGC
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertReceiveByteToUint16
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
</UL>

<P><STRONG><a name="[77]"></a>CLKCTRL_BKPCTRL_GetFlagStatus</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_BKPCTRL_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLKCTRL_BKPCTRL_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_HSEstatus
</UL>

<P><STRONG><a name="[79]"></a>CLKCTRL_DeInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ini
</UL>

<P><STRONG><a name="[7a]"></a>CLKCTRL_HSEconfig</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_HSEconfig))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ini
</UL>

<P><STRONG><a name="[76]"></a>CLKCTRL_HSEstatus</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_HSEstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLKCTRL_HSEstatus &rArr; CLKCTRL_BKPCTRL_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_BKPCTRL_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ini
</UL>

<P><STRONG><a name="[7b]"></a>CLKCTRL_MAX_CLKSelection</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_MAX_CLKSelection))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ini
</UL>

<P><STRONG><a name="[86]"></a>CLKCTRL_PER0_CLKcmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_PER0_CLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ini
</UL>

<P><STRONG><a name="[6f]"></a>CLKCTRL_PER1_CLKcmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f8_clkctrl.o(i.CLKCTRL_PER1_CLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>

<P><STRONG><a name="[78]"></a>CLK_ini</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, clk_config.o(i.CLK_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_ini &rArr; CLKCTRL_HSEstatus &rArr; CLKCTRL_BKPCTRL_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_MAX_CLKSelection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_HSEstatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_HSEconfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>CheckAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, receivedata.o(i.CheckAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckAddress &rArr; SelectAGCorFGC
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAGCorFGC
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyReferenceVoltageAGCorFGC
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART0_Handler
</UL>

<P><STRONG><a name="[7e]"></a>ControlVoltage</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, senddata.o(i.ControlVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ControlVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>

<P><STRONG><a name="[75]"></a>ConvertReceiveByteToUint16</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, receivedata.o(i.ConvertReceiveByteToUint16))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyReferenceVoltageAGCorFGC
</UL>

<P><STRONG><a name="[96]"></a>DAC_ini</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dac_config.o(i.DAC_ini))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>INT_ADC1_Handler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, senddata.o(i.INT_ADC1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = INT_ADC1_Handler &rArr; ControlVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>INT_TMR0_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, senddata.o(i.INT_TMR0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = INT_TMR0_Handler &rArr; TIMER_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetITStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>INT_TMR1_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, senddata.o(i.INT_TMR1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = INT_TMR1_Handler &rArr; TIMER_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetITStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>INT_UART0_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, receivedata.o(i.INT_UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = INT_UART0_Handler &rArr; CheckAddress &rArr; SelectAGCorFGC
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>PORT_Init</STRONG> (Thumb, 1132 bytes, Stack size 128 bytes, mdr32f8_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ini
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>

<P><STRONG><a name="[87]"></a>PORT_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f8_port.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAGCorFGC
</UL>

<P><STRONG><a name="[88]"></a>PORT_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f8_port.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectAGCorFGC
</UL>

<P><STRONG><a name="[85]"></a>PORT_ini</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, port_config.o(i.PORT_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PORT_ini &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_PER0_CLKcmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>SelectAGCorFGC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, receivedata.o(i.SelectAGCorFGC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SelectAGCorFGC
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
</UL>

<P><STRONG><a name="[89]"></a>TIMER0_ini</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, timer_config.o(i.TIMER0_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMER0_ini &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_PER0_CLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>TIMER1_ini</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, timer_config.o(i.TIMER1_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMER1_ini &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_PER0_CLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>TIMER_BRGInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, mdr32f8_tim.o(i.TIMER_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
</UL>

<P><STRONG><a name="[82]"></a>TIMER_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f8_tim.o(i.TIMER_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR1_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR0_Handler
</UL>

<P><STRONG><a name="[8e]"></a>TIMER_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f8_tim.o(i.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
</UL>

<P><STRONG><a name="[8b]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mdr32f8_tim.o(i.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
</UL>

<P><STRONG><a name="[81]"></a>TIMER_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f8_tim.o(i.TIMER_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR1_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR0_Handler
</UL>

<P><STRONG><a name="[8d]"></a>TIMER_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f8_tim.o(i.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
</UL>

<P><STRONG><a name="[91]"></a>UART_CLK_en</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mdr32f8_uart.o(i.UART_CLK_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_CLK_en
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
</UL>

<P><STRONG><a name="[83]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART0_Handler
</UL>

<P><STRONG><a name="[94]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
</UL>

<P><STRONG><a name="[92]"></a>UART_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
</UL>

<P><STRONG><a name="[80]"></a>UART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART0_Handler
</UL>

<P><STRONG><a name="[95]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
</UL>

<P><STRONG><a name="[93]"></a>UART_Init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mdr32f8_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
</UL>

<P><STRONG><a name="[84]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART0_Handler
</UL>

<P><STRONG><a name="[7f]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f8_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlVoltage
</UL>

<P><STRONG><a name="[90]"></a>UART_ini</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, uart_config.o(i.UART_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_ini &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CLK_en
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_PER1_CLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; ADC_ini &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ini
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ini
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ini
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_ini
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ini
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer_config.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_ini
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ini
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
